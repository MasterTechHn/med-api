name: Med-Api CD

on:
  push:
    branches: [ main ]
    
env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: med-api
  ECS_SERVICE: backend-service
  ECS_CLUSTER: med-api
  ECS_TASK_DEFINITION: .aws/ecs-task-definition.json
  CONTAINER_NAME: med-apiContainer
  APP_HOST: ${{ secrets.APP_HOST }} 
  APP_PORT: ${{ secrets.APP_PORT }}
  DB_HOST:  ${{ secrets.DB_HOST }}
  DB_NAME:  ${{ secrets.DB_NAME }}
  DB_PORT:  ${{ secrets.DB_PORT }}
  DB_USER:  ${{ secrets.DB_USER }} 
  DB_PASSWORD:  ${{ secrets.DB_PASSWORD }} 

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
        APP_HOST: ${{ env.APP_HOST }}
        APP_PORT: ${{ env.APP_PORT }}
        DB_HOST: ${{ env.DB_HOST }}
        DB_NAME: ${{ env.DB_NAME }}
        DB_PORT: ${{ env.DB_PORT }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
